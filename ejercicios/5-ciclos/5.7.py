# Ejercicio 5.7. N칰meros perfectos y n칰meros amigos
# a) Escribir una funci칩n que devuelva la suma de todos los divisores de un n칰mero 洧녵, sin
# incluirlo.
# b) Usando la funci칩n anterior, escribir una funci칩n que imprima los primeros 洧녴 n칰meros
# tales que la suma de sus divisores sea igual a s칤 mismo (es decir los primeros 洧녴 n칰meros
# perfectos).
# c) Usando la primera funci칩n, escribir una funci칩n que imprima las primeras 洧녴 parejas
# de n칰meros (洧녩, 洧녪), tales que la suma de los divisores de 洧녩 es igual a 洧녪 y la suma de los
# divisores de 洧녪 es igual a 洧녩 (es decir las primeras 洧녴 parejas de n칰meros amigos).
# d) Proponer optimizaciones a las funciones anteriores para disminuir el tiempo de ejecuci칩n.


def suma_divisores(n):
    suma = 0
    for i in range(1, n):
        if n % i == 0:
            suma += i
    return suma


# print(suma_divisores(10))


def numeros_perfectos(m):
    numeros = []
    for i in range(1, m):
        if suma_divisores(i) == i:
            numeros.append(i)
    return numeros


# print(numeros_perfectos(10000))

def numeros_amigos(m):
    parejas = []
    for a in range(1, m):
        for b in range(1, m):
            if suma_divisores(a) == suma_divisores(b):
                parejas.append((a, b))

    return parejas


print(numeros_amigos(10))
